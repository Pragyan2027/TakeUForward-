class Solution {

    private void backtrack(int index, int n , int[] nums ,  List<Integer> current, List<List<Integer>> ans){
        if(index == n){
            ans.add(new ArrayList<>(current));
            return;
        }
        backtrack(index + 1 , n , nums,current,ans);

        current.add(nums[index]);
        backtrack(index+1 , n , nums,current,ans);

        current.remove(current.size()-1);
    }
    public List<List<Integer>> powerSet(int[] nums) {
        //your code goes here
        List<List<Integer>> ans = new ArrayList<>();  // List to store all subsets
        List<Integer> current = new ArrayList<>();  // Temporary list to store the current subset
        backtrack(0, nums.length, nums, current, ans);  // Start the recursive process
        return ans;
    }
}
